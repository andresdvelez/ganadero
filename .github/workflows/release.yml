name: release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Detectar carpeta del proyecto
        id: detect-macos
        run: |
          if [ -d "${GITHUB_WORKSPACE}/ganado-ai-app" ]; then
            echo "PROJECT_DIR=${GITHUB_WORKSPACE}/ganado-ai-app" >> $GITHUB_ENV
            echo "ARTIFACT_PREFIX=ganado-ai-app/" >> $GITHUB_ENV
          else
            echo "PROJECT_DIR=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
            echo "ARTIFACT_PREFIX=" >> $GITHUB_ENV
          fi
      - name: Mostrar rutas
        run: |
          echo "workspace: $GITHUB_WORKSPACE"
          echo "project: $PROJECT_DIR"
          ls -la "$PROJECT_DIR" || true
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            echo "package-lock.json no existe; usando npm install"
            npm install --no-audit --no-fund
          fi
        working-directory: ${{ env.PROJECT_DIR }}
      - name: Build app (standalone + tauri)
        run: npm run tauri:build
        working-directory: ${{ env.PROJECT_DIR }}
      - name: Upload DMG
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg
          path: ${{ env.ARTIFACT_PREFIX }}src-tauri/target/release/bundle/dmg/*.dmg
      # Firma y notarizaciÃ³n macOS: pendiente de secretos y pasos de notarytool/codesign

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Detectar carpeta del proyecto
        id: detect-windows
        shell: pwsh
        run: |
          if (Test-Path "$env:GITHUB_WORKSPACE/ganado-ai-app") {
            echo "PROJECT_DIR=$env:GITHUB_WORKSPACE/ganado-ai-app" >> $env:GITHUB_ENV
            echo "ARTIFACT_PREFIX=ganado-ai-app/" >> $env:GITHUB_ENV
          } else {
            echo "PROJECT_DIR=$env:GITHUB_WORKSPACE" >> $env:GITHUB_ENV
            echo "ARTIFACT_PREFIX=" >> $env:GITHUB_ENV
          }
      - name: Mostrar rutas
        shell: pwsh
        run: |
          Write-Host "workspace: $env:GITHUB_WORKSPACE"
          Write-Host "project: $env:PROJECT_DIR"
          if (Test-Path $env:PROJECT_DIR) { Get-ChildItem -Force $env:PROJECT_DIR | Select-Object -First 10 | Format-List } else { Write-Host "project dir not found" }
      - name: Marcar workspace como seguro (opcional)
        shell: pwsh
        run: git config --global --add safe.directory $env:GITHUB_WORKSPACE
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
      - name: Install deps
        shell: pwsh
        run: |
          if (Test-Path package-lock.json) {
            npm ci
          } else {
            Write-Host "package-lock.json no existe; usando npm install"
            npm install --no-audit --no-fund
          }
        working-directory: ${{ env.PROJECT_DIR }}
      - name: Import Windows code signing certificate
        shell: pwsh
        env:
          WINDOWS_CERTIFICATE_BASE64: ${{ secrets.WINDOWS_CERTIFICATE_BASE64 }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          if (-not $env:WINDOWS_CERTIFICATE_BASE64) { throw "Missing WINDOWS_CERTIFICATE_BASE64 secret" }
          if (-not $env:WINDOWS_CERTIFICATE_PASSWORD) { throw "Missing WINDOWS_CERTIFICATE_PASSWORD secret" }
          New-Item -ItemType Directory -Path certificate | Out-Null
          Set-Content -Path certificate\cert_base64.txt -Value $env:WINDOWS_CERTIFICATE_BASE64
          certutil -decode certificate\cert_base64.txt certificate\codesign.pfx
          Remove-Item certificate\cert_base64.txt
          $securePwd = ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText
          Import-PfxCertificate -FilePath certificate\codesign.pfx -CertStoreLocation Cert:\LocalMachine\My -Password $securePwd | Out-Null
          $thumb = (Get-ChildItem Cert:\LocalMachine\My | Where-Object { $_.HasPrivateKey } | Select-Object -First 1).Thumbprint
          if (-not $thumb) { throw "No certificate thumbprint found in LocalMachine\My" }
          echo "WINDOWS_CERTIFICATE_THUMBPRINT=$thumb" | Out-File -FilePath $env:GITHUB_ENV -Append
      - name: Inject thumbprint into tauri.conf.json
        shell: pwsh
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          (Get-Content src-tauri/tauri.conf.json) -replace '\$\{WINDOWS_CERTIFICATE_THUMBPRINT\}', "$env:WINDOWS_CERTIFICATE_THUMBPRINT" | Set-Content src-tauri/tauri.conf.json
          Write-Host "Injected thumbprint: $env:WINDOWS_CERTIFICATE_THUMBPRINT"
      - name: Build app (standalone + tauri, signed)
        run: npm run tauri:build
        working-directory: ${{ env.PROJECT_DIR }}
      - name: Upload MSI
        uses: actions/upload-artifact@v4
        with:
          name: windows-msi
          path: ${{ env.ARTIFACT_PREFIX }}src-tauri/target/release/bundle/msi/*.msi
