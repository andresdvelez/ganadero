// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

// User model - represents a rancher/user
model User {
  id                String            @id @default(cuid())
  clerkId           String            @unique
  email             String            @unique
  name              String?
  ranchName         String?
  location          String?
  timezone          String            @default("America/Denver")
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  animals           Animal[]
  healthRecords     HealthRecord[]
  breedingRecords   BreedingRecord[]
  modules           UserModule[]
  syncQueue         SyncQueue[]
  conversations     AIConversation[]
  products          Product[]
  stockMovements    StockMovement[]
  milkRecords       MilkRecord[]
  pastures          Pasture[]
  labExams          LabExam[]
  memberships       OrganizationMembership[]
  organizations     Organization[]     @relation("OrgCreatedBy")
  devices           Device[]
  
  @@index([clerkId])
  @@index([email])
}

model Organization {
  id                String                     @id @default(cuid())
  name              String
  createdByUserId   String
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt

  createdBy         User                       @relation("OrgCreatedBy", fields: [createdByUserId], references: [id], onDelete: Cascade)
  memberships       OrganizationMembership[]
  devices           Device[]

  @@index([createdByUserId])
  @@index([name])
}

model OrganizationMembership {
  id        String   @id @default(cuid())
  orgId     String
  userId    String
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([orgId, userId])
  @@index([orgId])
  @@index([userId])
}

model Device {
  id          String   @id @default(cuid())
  deviceId    String   @unique
  name        String?
  platform    String?
  userId      String
  orgId       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization? @relation(fields: [orgId], references: [id])

  @@index([userId])
  @@index([orgId])
}

// Animal model - represents cattle/livestock
model Animal {
  id                String            @id @default(cuid())
  externalId        String?           @unique
  userId            String
  name              String
  tagNumber         String            @unique
  species           String            @default("cattle")
  breed             String?
  sex               String
  birthDate         DateTime?
  weight            Float?
  color             String?
  status            String            @default("active") // active, sold, deceased
  motherId          String?
  fatherId          String?
  imageUrl          String?
  metadata          String?           // JSON string for additional data
  qrCode            String?
  nfcId             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  mother            Animal?           @relation("MotherChildren", fields: [motherId], references: [id])
  father            Animal?           @relation("FatherChildren", fields: [fatherId], references: [id])
  motherChildren    Animal[]          @relation("MotherChildren")
  fatherChildren    Animal[]          @relation("FatherChildren")
  healthRecords     HealthRecord[]
  breedingRecords   BreedingRecord[]  @relation("AnimalBreedingRecords")
  sireRecords       BreedingRecord[]  @relation("SireBreedingRecords")
  milkRecords       MilkRecord[]
  labExams          LabExam[]
  
  @@index([userId])
  @@index([tagNumber])
  @@index([status])
}

// Health Record model - tracks medical history
model HealthRecord {
  id                String            @id @default(cuid())
  externalId        String?           @unique
  userId            String
  animalId          String
  type              String            // vaccination, treatment, deworming, checkup
  description       String
  medication        String?
  dosage            String?
  veterinarian      String?
  cost              Float?
  notes             String?
  performedAt       DateTime
  nextDueDate       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  animal            Animal            @relation(fields: [animalId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([animalId])
  @@index([type])
  @@index([performedAt])
}

// Breeding Record model - tracks breeding history
model BreedingRecord {
  id                String            @id @default(cuid())
  externalId        String?           @unique
  userId            String
  animalId          String
  eventType         String            // heat, insemination, pregnancy_check, birth
  eventDate         DateTime
  sireId            String?
  inseminationType  String?           // natural, artificial
  pregnancyStatus   String?           // confirmed, not_confirmed, unknown
  expectedDueDate   DateTime?
  actualBirthDate   DateTime?
  offspringCount    Int?
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  animal            Animal            @relation("AnimalBreedingRecords", fields: [animalId], references: [id], onDelete: Cascade)
  sire              Animal?           @relation("SireBreedingRecords", fields: [sireId], references: [id])
  
  @@index([userId])
  @@index([animalId])
  @@index([eventType])
  @@index([eventDate])
}

// Module Registry - tracks available modules
model ModuleRegistry {
  id                String            @id @default(cuid())
  name              String            @unique
  displayName       String
  description       String
  category          String            // management, health, breeding, financial, etc.
  icon              String
  version           String
  isCore            Boolean           @default(false)
  isEnabled         Boolean           @default(true)
  config            String?           // JSON configuration
  aiPrompts         String?           // JSON array of AI prompts
  permissions       String?           // JSON array of required permissions
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  userModules       UserModule[]
  
  @@index([category])
  @@index([isEnabled])
}

// User Module - links users to their enabled modules
model UserModule {
  id                String            @id @default(cuid())
  userId            String
  moduleId          String
  isEnabled         Boolean           @default(true)
  customConfig      String?           // JSON for user-specific config
  lastUsed          DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  module            ModuleRegistry    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, moduleId])
  @@index([userId])
  @@index([moduleId])
}

// Inventory (Products)
model Product {
  id           String   @id @default(cuid())
  externalId   String?  @unique
  userId       String
  code         String
  name         String
  category     String?
  unit         String
  minStock     Float?
  currentStock Float    @default(0)
  cost         Float?
  supplier     String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  movements    StockMovement[]

  @@index([userId])
  @@index([code])
}

model StockMovement {
  id          String   @id @default(cuid())
  externalId  String?  @unique
  userId      String
  productId   String
  type        String   // in | out | adjust
  quantity    Float
  unitCost    Float?
  reason      String?
  relatedEntity String?
  occurredAt  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
  @@index([occurredAt])
}

// Milk production records
model MilkRecord {
  id          String   @id @default(cuid())
  externalId  String?  @unique
  userId      String
  animalId    String?
  session     String   // AM | PM | TOTAL
  liters      Float
  fatPct      Float?
  proteinPct  Float?
  ccs         Float?
  notes       String?
  recordedAt  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  animal      Animal?  @relation(fields: [animalId], references: [id])

  @@index([userId])
  @@index([animalId])
  @@index([recordedAt])
}

// Pastures
model Pasture {
  id             String   @id @default(cuid())
  externalId     String?  @unique
  userId         String
  name           String
  areaHa         Float?
  currentGroup   String?
  occupancySince DateTime?
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Laboratory exams
model LabExam {
  id           String   @id @default(cuid())
  externalId   String?  @unique
  userId       String
  animalId     String?
  examType     String
  sampleType   String?
  labName      String?
  requestedAt  DateTime
  resultAt     DateTime?
  result       String?
  antibiogram  String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  animal       Animal?  @relation(fields: [animalId], references: [id])

  @@index([userId])
  @@index([animalId])
  @@index([examType])
}

// Sync Queue - tracks pending sync operations
model SyncQueue {
  id                String            @id @default(cuid())
  userId            String
  operation         String            // create, update, delete
  entityType        String            // animal, health_record, breeding_record
  entityId          String
  data              String            // JSON payload
  status            String            @default("pending") // pending, syncing, synced, failed, conflict
  retryCount        Int               @default(0)
  errorMessage      String?
  syncedAt          DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@index([entityType])
  @@index([createdAt])
}

// AI Conversation - tracks chat history
model AIConversation {
  id                String            @id @default(cuid())
  userId            String
  sessionId         String
  role              String            // user, assistant, system
  content           String
  moduleContext     String?           // Which module was active
  metadata          String?           // JSON for additional data
  createdAt         DateTime          @default(now())
  
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
}
