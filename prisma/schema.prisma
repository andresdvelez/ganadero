// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

// Billing enums
enum SubscriptionStatus {
  PENDING
  ACTIVE
  PAST_DUE
  CANCELED
}

enum BillingPeriod {
  MONTHLY
  ANNUAL
}

enum PaymentProvider {
  MERCADO_PAGO
}

// User model - represents a rancher/user
model User {
  id                String            @id @default(cuid())
  clerkId           String            @unique
  email             String            @unique
  name              String?
  ranchName         String?
  location          String?
  timezone          String            @default("America/Denver")
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  animals           Animal[]
  healthRecords     HealthRecord[]
  breedingRecords   BreedingRecord[]
  modules           UserModule[]
  syncQueue         SyncQueue[]
  conversations     AIConversation[]
  products          Product[]
  stockMovements    StockMovement[]
  milkRecords       MilkRecord[]
  pastures          Pasture[]
  labExams          LabExam[]
  memberships       OrganizationMembership[]
  organizations     Organization[]     @relation("OrgCreatedBy")
  devices           Device[]
  deletionLogs      DeletionLog[]
  aiUserProfile     AIUserProfile?
  aiMemories        AIMemory[]
  aiChoices         AIChoice[]
  tasks             Task[]
  financeTransactions FinanceTransaction[]
  sensors           Sensor[]
  locations         Location[]
  // Phase 1 back-relations
  breedingSyncBatches BreedingSyncBatch[]
  palpationRecords     PalpationRecord[]
  abortionRecords      AbortionRecord[]
  mastitisCases        MastitisCase[]
  weightRecords        WeightRecord[]
  carcassData          CarcassData[]
  suppliers            Supplier[]
  purchaseInvoices     PurchaseInvoice[]
  invoicePayments      InvoicePayment[]
  alertRules           AlertRule[]
  alertInstances       AlertInstance[]
  pastureEvents        PastureEvent[]
  pastureMeasurements  PastureMeasurement[]
  aiTanks              AITank[]
  semenBatches         SemenBatch[]
  semenMovements       SemenMovement[]
  embryoBatches        EmbryoBatch[]
  embryoMovements      EmbryoMovement[]
  invoiceAttachments   InvoiceAttachment[]
  farms                 Farm[]
  
  @@index([clerkId])
  @@index([email])
}

model Organization {
  id                String                     @id @default(cuid())
  name              String
  createdByUserId   String
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt

  createdBy         User                       @relation("OrgCreatedBy", fields: [createdByUserId], references: [id], onDelete: Cascade)
  memberships       OrganizationMembership[]
  devices           Device[]
  farms             Farm[]
  // Billing relations
  subscriptions     Subscription[]
  orgUsage          OrgUsage?

  @@index([createdByUserId])
  @@index([name])
}

model OrganizationMembership {
  id        String   @id @default(cuid())
  orgId     String
  userId    String
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([orgId, userId])
  @@index([orgId])
  @@index([userId])
}

model Device {
  id          String   @id @default(cuid())
  deviceId    String   @unique
  name        String?
  platform    String?
  userId      String
  orgId       String?
  hasPasscode Boolean  @default(false)
  resetCode   String?
  resetCodeExpiresAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization? @relation(fields: [orgId], references: [id])

  @@index([userId])
  @@index([orgId])
}

// Pricing & Billing models

model Plan {
  id          String        @id @default(cuid())
  key         String        @unique
  name        String
  description String?
  period      BillingPeriod
  priceCop    Int
  animalLimit Int?
  userLimit   Int?
  deviceLimit Int?
  discountPct Int?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Addon {
  id          String   @id @default(cuid())
  key         String   @unique
  name        String
  description String?
  priceCop    Int
  kind        String   // device|user|feature
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Subscription {
  id          String             @id @default(cuid())
  orgId       String
  userId      String
  provider    PaymentProvider
  providerRef String?
  status      SubscriptionStatus @default(PENDING)
  period      BillingPeriod
  planKey     String
  qtyUsers    Int                @default(1)
  qtyDevices  Int                @default(1)
  startsAt    DateTime?
  endsAt      DateTime?
  canceledAt  DateTime?
  raw         String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@index([userId])
  @@index([status])
}

model OrgUsage {
  id        String   @id @default(cuid())
  orgId     String   @unique
  animals   Int      @default(0)
  users     Int      @default(1)
  devices   Int      @default(0)
  updatedAt DateTime @updatedAt

  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

// Animal model - represents cattle/livestock
model Animal {
  id                String            @id @default(cuid())
  externalId        String?           @unique
  userId            String
  name              String
  tagNumber         String            @unique
  species           String            @default("cattle")
  breed             String?
  sex               String
  birthDate         DateTime?
  weight            Float?
  color             String?
  status            String            @default("active") // active, sold, deceased
  motherId          String?
  fatherId          String?
  imageUrl          String?
  metadata          String?           // JSON string for additional data
  qrCode            String?
  nfcId             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  farmId            String

  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  mother            Animal?           @relation("MotherChildren", fields: [motherId], references: [id])
  father            Animal?           @relation("FatherChildren", fields: [fatherId], references: [id])
  motherChildren    Animal[]          @relation("MotherChildren")
  fatherChildren    Animal[]          @relation("FatherChildren")
  healthRecords     HealthRecord[]
  breedingRecords   BreedingRecord[]  @relation("AnimalBreedingRecords")
  sireRecords       BreedingRecord[]  @relation("SireBreedingRecords")
  milkRecords       MilkRecord[]
  labExams          LabExam[]
  // Phase 1 back-relations
  breedingSyncEntries BreedingSyncAnimal[]
  palpationRecords     PalpationRecord[]
  abortionRecords      AbortionRecord[]
  mastitisCases        MastitisCase[]
  weightRecords        WeightRecord[]
  carcassData          CarcassData[]
  embryoDonations      EmbryoBatch[]       @relation("EmbryoDonor")
  embryoSireEmbryos    EmbryoBatch[]       @relation("EmbryoSire")
  semenSireBatches     SemenBatch[]        @relation("SemenSire")
  farm               Farm              @relation(fields: [farmId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([tagNumber])
  @@index([status])
  @@index([farmId])
  @@unique([farmId, tagNumber])
}

// Health Record model - tracks medical history
model HealthRecord {
  id                String            @id @default(cuid())
  externalId        String?           @unique
  userId            String
  animalId          String
  type              String            // vaccination, treatment, deworming, checkup
  description       String
  medication        String?
  dosage            String?
  veterinarian      String?
  cost              Float?
  notes             String?
  performedAt       DateTime
  nextDueDate       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  animal            Animal            @relation(fields: [animalId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([animalId])
  @@index([type])
  @@index([performedAt])
}

// Breeding Record model - tracks breeding history
model BreedingRecord {
  id                String            @id @default(cuid())
  externalId        String?           @unique
  userId            String
  animalId          String
  eventType         String            // heat, insemination, pregnancy_check, birth
  eventDate         DateTime
  sireId            String?
  inseminationType  String?           // natural, artificial
  pregnancyStatus   String?           // confirmed, not_confirmed, unknown
  expectedDueDate   DateTime?
  actualBirthDate   DateTime?
  offspringCount    Int?
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  animal            Animal            @relation("AnimalBreedingRecords", fields: [animalId], references: [id], onDelete: Cascade)
  sire              Animal?           @relation("SireBreedingRecords", fields: [sireId], references: [id])
  
  @@index([userId])
  @@index([animalId])
  @@index([eventType])
  @@index([eventDate])
}

// Module Registry - tracks available modules
model ModuleRegistry {
  id                String            @id @default(cuid())
  name              String            @unique
  displayName       String
  description       String
  category          String            // management, health, breeding, financial, etc.
  icon              String
  version           String
  isCore            Boolean           @default(false)
  isEnabled         Boolean           @default(true)
  config            String?           // JSON configuration
  aiPrompts         String?           // JSON array of AI prompts
  permissions       String?           // JSON array of required permissions
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  userModules       UserModule[]
  
  @@index([category])
  @@index([isEnabled])
}

// User Module - links users to their enabled modules
model UserModule {
  id                String            @id @default(cuid())
  userId            String
  moduleId          String
  isEnabled         Boolean           @default(true)
  customConfig      String?           // JSON for user-specific config
  lastUsed          DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  module            ModuleRegistry    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, moduleId])
  @@index([userId])
  @@index([moduleId])
}

// Inventory (Products)
model Product {
  id           String   @id @default(cuid())
  externalId   String?  @unique
  userId       String
  code         String
  name         String
  category     String?
  unit         String
  minStock     Float?
  currentStock Float    @default(0)
  cost         Float?
  supplier     String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  movements    StockMovement[]
  // Phase 1 back-relations
  purchaseItems PurchaseInvoiceItem[]

  @@index([userId])
  @@index([code])
}

model StockMovement {
  id          String   @id @default(cuid())
  externalId  String?  @unique
  userId      String
  productId   String
  type        String   // in | out | adjust
  quantity    Float
  unitCost    Float?
  reason      String?
  relatedEntity String?
  occurredAt  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
  @@index([occurredAt])
}

// Milk production records
model MilkRecord {
  id          String   @id @default(cuid())
  externalId  String?  @unique
  userId      String
  animalId    String?
  session     String   // AM | PM | TOTAL
  liters      Float
  fatPct      Float?
  proteinPct  Float?
  ccs         Float?
  notes       String?
  recordedAt  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  farmId      String

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  animal      Animal?  @relation(fields: [animalId], references: [id])
  farm        Farm     @relation(fields: [farmId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([animalId])
  @@index([recordedAt])
  @@index([farmId])
}

// Pastures
model Pasture {
  id             String   @id @default(cuid())
  externalId     String?  @unique
  userId         String
  name           String
  areaHa         Float?
  currentGroup   String?
  occupancySince DateTime?
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Phase 1 back-relations
  events         PastureEvent[]
  measurements   PastureMeasurement[]

  @@index([userId])
}

// Laboratory exams
model LabExam {
  id           String   @id @default(cuid())
  externalId   String?  @unique
  userId       String
  animalId     String?
  examType     String
  sampleType   String?
  labName      String?
  requestedAt  DateTime
  resultAt     DateTime?
  result       String?
  antibiogram  String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  animal       Animal?  @relation(fields: [animalId], references: [id])

  @@index([userId])
  @@index([animalId])
  @@index([examType])
}

// Tareas
model Task {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  status      String   // open | in_progress | done
  priority    String?
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

// Finanzas
model FinanceTransaction {
  id          String   @id @default(cuid())
  userId      String
  type        String   // income | expense
  category    String?
  amount      Float
  currency    String?
  date        DateTime
  counterparty String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([date])
}

// Sensores
model Sensor {
  id            String   @id @default(cuid())
  userId        String
  name          String
  type          String?
  status        String?  // active | inactive
  lastReadingAt DateTime?
  locationName  String?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

// Ubicaciones
model Location {
  id        String   @id @default(cuid())
  userId    String
  name      String
  type      String?
  lat       Float?
  lng       Float?
  areaHa    Float?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([name])
}

// Sync Queue - tracks pending sync operations
model SyncQueue {
  id                String            @id @default(cuid())
  userId            String
  operation         String            // create, update, delete
  entityType        String            // animal, health_record, breeding_record
  entityId          String
  data              String            // JSON payload
  status            String            @default("pending") // pending, syncing, synced, failed, conflict
  retryCount        Int               @default(0)
  errorMessage      String?
  syncedAt          DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@index([entityType])
  @@index([createdAt])
}

// AI Conversation - tracks chat history
model AIConversation {
  id                String            @id @default(cuid())
  userId            String
  sessionId         String
  role              String            // user, assistant, system
  content           String
  moduleContext     String?           // Which module was active
  metadata          String?           // JSON for additional data
  createdAt         DateTime          @default(now())
  
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
}

// AI user profile and long-term memory
model AIUserProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  bio       String?  // free text about the user
  preferences String? // JSON with tone, language, module prefs
  goals     String?  // JSON list of goals
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AIMemory {
  id         String   @id @default(cuid())
  userId     String
  content    String   // normalized fact or preference
  importance Int      @default(1) // 1-5 heuristic
  tags       String?  // comma-separated or JSON
  source     String?  // chat, form, import
  createdAt  DateTime @default(now())
  lastUsedAt DateTime?

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, importance])
  @@index([createdAt])
}

// Human-in-the-loop disambiguation choice captured from users (aggregable)
model AIChoice {
  id           String   @id @default(cuid())
  userId       String
  sessionId    String
  messageId    String?
  chosenModule String
  chosenAction String?
  keywords     String?  // JSON array of keywords tokenized from query
  tone         String?  // informal|formal|direct|amistoso
  candidates   String?  // JSON candidate list returned by classifier
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionId])
  @@index([chosenModule])
}

model DeletionLog {
  id         String   @id @default(cuid())
  userId     String
  entityType String
  entityId   String
  deletedAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([entityType, entityId])
  @@index([deletedAt])
}

// Phase 1 — Reproduction: synchronization batches, palpations, abortions
model BreedingSyncBatch {
  id          String   @id @default(cuid())
  userId      String
  protocol    String?
  startDate   DateTime
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  animals     BreedingSyncAnimal[]

  @@index([userId])
  @@index([startDate])
}

model BreedingSyncAnimal {
  id        String   @id @default(cuid())
  batchId   String
  animalId  String
  status    String?  // scheduled | applied | inseminated | failed
  date      DateTime?
  notes     String?

  batch     BreedingSyncBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  animal    Animal            @relation(fields: [animalId], references: [id], onDelete: Cascade)

  @@unique([batchId, animalId])
  @@index([animalId])
}

model PalpationRecord {
  id           String   @id @default(cuid())
  userId       String
  animalId     String
  palpationDate DateTime
  result       String   // pregnant | open | unknown
  technician   String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  animal       Animal   @relation(fields: [animalId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([animalId])
  @@index([palpationDate])
}

model AbortionRecord {
  id        String   @id @default(cuid())
  userId    String
  animalId  String
  date      DateTime
  cause     String?
  notes     String?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  animal    Animal   @relation(fields: [animalId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([animalId])
  @@index([date])
}

// Phase 1 — Mastitis & CCS
model MastitisCase {
  id           String   @id @default(cuid())
  userId       String
  animalId     String
  detectedAt   DateTime
  quarter      String? // LF | LR | RF | RR
  cmtScore     String? // CMT result if available
  bacteria     String?
  antibiogram  String? // normalized summary or LabExam linkage notes
  labExamId    String?
  treatment    String?
  status       String   @default("open") // open | resolved
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  animal       Animal   @relation(fields: [animalId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([animalId])
  @@index([detectedAt])
  @@index([status])
}

// Phase 1 — Weights & Carcass
model WeightRecord {
  id         String   @id @default(cuid())
  userId     String
  animalId   String
  weighedAt  DateTime
  weightKg   Float
  method     String? // electronic | manual | scale_id
  source     String? // pasture | corral | sale | vet
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  animal     Animal   @relation(fields: [animalId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([animalId])
  @@index([weighedAt])
}

model CarcassData {
  id            String   @id @default(cuid())
  userId        String
  animalId      String
  date          DateTime
  hotCarcassKg  Float?
  coldCarcassKg Float?
  dressingPct   Float?
  grade         String?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  animal        Animal   @relation(fields: [animalId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([animalId])
  @@index([date])
}

// Phase 1 — Suppliers, AP & Purchase Invoices
model Supplier {
  id        String   @id @default(cuid())
  userId    String
  name      String
  taxId     String?
  phone     String?
  email     String?
  address   String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices  PurchaseInvoice[]

  @@index([userId])
  @@index([name])
}

model PurchaseInvoice {
  id           String   @id @default(cuid())
  userId       String
  supplierId   String
  invoiceNumber String?
  date         DateTime
  subtotal     Float    @default(0)
  tax          Float    @default(0)
  total        Float    @default(0)
  status       String   @default("open") // open | paid | cancelled
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  supplier     Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  items        PurchaseInvoiceItem[]
  payments     InvoicePayment[]
  attachments  InvoiceAttachment[]

  @@index([userId])
  @@index([supplierId])
  @@index([date])
  @@index([status])
}

model PurchaseInvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  productId   String?
  description String?
  quantity    Float
  unit        String?
  unitCost    Float
  total       Float

  invoice     PurchaseInvoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  product     Product?        @relation(fields: [productId], references: [id])
}

model InvoicePayment {
  id           String   @id @default(cuid())
  userId       String
  invoiceId    String
  date         DateTime
  amount       Float
  method       String? // cash | transfer | credit
  notes        String?

  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoice      PurchaseInvoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([invoiceId])
  @@index([date])
}

// Purchase Invoice Attachments (S3/MinIO or inline fallback)
model InvoiceAttachment {
  id         String   @id @default(cuid())
  userId     String
  invoiceId  String
  fileName   String
  mimeType   String
  storage    String   // s3 | inline
  url        String?  // for s3/public
  data       Bytes?   // inline fallback
  createdAt  DateTime @default(now())

  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoice    PurchaseInvoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([invoiceId])
}

// Phase 1 — Alerts & Action Lists
model AlertRule {
  id           String   @id @default(cuid())
  userId       String
  name         String
  module       String   // animals | health | breeding | milk | inventory | finance | pastures
  condition    String   // JSON expression/config
  enabled      Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  instances    AlertInstance[]

  @@index([userId])
  @@index([module])
  @@index([enabled])
}

model AlertInstance {
  id          String   @id @default(cuid())
  userId      String
  ruleId      String
  entityType  String
  entityId    String
  triggeredAt DateTime @default(now())
  status      String   @default("open") // open | acknowledged | resolved
  payload     String?  // JSON snapshot

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  rule        AlertRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([ruleId])
  @@index([status])
  @@index([triggeredAt])
}

// Phase 1 — PRV (Pasture Rotation & Forage)
model PastureEvent {
  id        String   @id @default(cuid())
  userId    String
  pastureId String
  type      String   // enter | leave | rest
  date      DateTime
  groupName String?
  notes     String?

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  pasture   Pasture @relation(fields: [pastureId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([pastureId])
  @@index([date])
}

model PastureMeasurement {
  id          String   @id @default(cuid())
  userId      String
  pastureId   String
  date        DateTime
  forageKgDMHa Float?
  restDays    Int?
  growthRate  Float? // kg DM/ha/day
  notes       String?

  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  pasture     Pasture @relation(fields: [pastureId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([pastureId])
  @@index([date])
}

// Phase 1 — IA Assets: Tanks, Semen & Embryos
model AITank {
  id             String   @id @default(cuid())
  userId         String
  name           String
  serial         String?
  location       String?
  capacityLiters Float?
  nitrogenLevel  Float? // %
  lastRefillAt   DateTime?
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  semenBatches   SemenBatch[]
  embryoBatches  EmbryoBatch[]

  @@index([userId])
}

model SemenBatch {
  id         String   @id @default(cuid())
  userId     String
  code       String
  sireId     String?
  breed      String?
  strawCount Int      @default(0)
  tankId     String?
  canister   String?
  acquiredAt DateTime?
  notes      String?

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tank       AITank?  @relation(fields: [tankId], references: [id])
  sire       Animal?  @relation("SemenSire", fields: [sireId], references: [id])
  movements  SemenMovement[]

  @@index([userId])
  @@index([code])
}

model SemenMovement {
  id           String   @id @default(cuid())
  userId       String
  semenBatchId String
  type         String   // in | out | adjust
  quantity     Int
  date         DateTime
  reason       String?

  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  semenBatch   SemenBatch @relation(fields: [semenBatchId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([semenBatchId])
  @@index([date])
}

model EmbryoBatch {
  id          String   @id @default(cuid())
  userId      String
  code        String
  donorId     String?
  sireId      String?
  stage       String?
  strawCount  Int      @default(0)
  tankId      String?
  canister    String?
  frozenAt    DateTime?
  notes       String?

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tank        AITank?  @relation(fields: [tankId], references: [id])
  donor       Animal?  @relation("EmbryoDonor", fields: [donorId], references: [id])
  sire        Animal?  @relation("EmbryoSire", fields: [sireId], references: [id])
  movements   EmbryoMovement[]

  @@index([userId])
  @@index([code])
}

model EmbryoMovement {
  id            String   @id @default(cuid())
  userId        String
  embryoBatchId String
  type          String   // in | out | adjust
  quantity      Int
  date          DateTime
  reason        String?

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  embryoBatch   EmbryoBatch @relation(fields: [embryoBatchId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([embryoBatchId])
  @@index([date])
}

model Farm {
  id              String   @id @default(cuid())
  orgId           String
  createdByUserId String
  code            String   @db.VarChar(32)
  name            String
  location        String?
  ownerName       String?
  address         String?
  directions      String?
  officialNumber  String?
  phone           String?
  ranchPhone      String?
  nit             String?
  breederName     String? // Criador
  startDate       DateTime?
  lastDataEntryAt DateTime?
  lastVisitAt     DateTime?
  // Existencias
  maleCount       Int      @default(0)
  femaleCount     Int      @default(0)
  // U.G.G (Unidad Global de Ganado)
  uggValue        Float?   // UGG calculada para la finca
  uggLots         Float?   // UGG por lotes (si aplica)
  uggTotal        Float?   // Total UGG mostrado en pantalla
  uggAsOf         DateTime?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  organization    Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  createdBy       User         @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  animals         Animal[]
  milkRecords     MilkRecord[]

  @@index([orgId])
  @@index([code])
  @@unique([orgId, code])
}
